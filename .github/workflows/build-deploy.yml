name: Docker Release CI/CD

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Build Go binary with builder Dockerfile
        run: |
          echo "Building Go binary with builder Dockerfile..."
          docker build -f .deploy/builder.Dockerfile -t artventuria-builder .
          docker run --rm -v $PWD/build:/usr/src/app/build artventuria-builder

      - name: Build Docker image
        run: |
          echo "Building Docker image for deployment..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/artventuria-api:${{ github.ref_name }} -f .deploy/Dockerfile .

      - name: Log in to Docker Hub
        run: |
          echo "Logging into Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/artventuria-api:${{ github.ref_name }}

      - name: Debug SSH Key
        run: |
          # Check if the key is being decoded correctly (print first line only)
          echo "${{ secrets.SERVER_SSH_KEY }}" | base64 -d | head -n 1
          
          # Check if the key starts with correct SSH key format
          if echo "${{ secrets.SERVER_SSH_KEY }}" | base64 -d | grep -q "BEGIN"; then
            echo "SSH key appears to be in the correct format"
          else
            echo "SSH key may not be in the correct format"
          fi

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" | base64 -d > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          
          # Print SSH key permissions
          ls -la ~/.ssh/private_key
          
          # Create SSH config file with verbose logging
          cat > ~/.ssh/config << EOF
          Host ec2
            HostName ${{ secrets.SERVER_HOST }}
            User ec2-user
            IdentityFile ~/.ssh/private_key
            StrictHostKeyChecking no
            LogLevel DEBUG3
          EOF
          
          # Print SSH config (without sensitive data)
          cat ~/.ssh/config

      - name: Test SSH Connection with Verbose Output
        run: |
          echo "Testing SSH connection with verbose output..."
          ssh -v ec2 "echo 'SSH connection successful'"

      - name: Deploy to Server
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        if: false  # Temporarily disabled until SSH is working
        run: |
          ssh ec2 << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/artventuria-api:${GITHUB_REF_NAME}
          
            echo "Stopping and removing any existing container..."
            docker stop artventuria-api || true
            docker rm artventuria-api || true
          
            echo "Running the new container..."
            docker run -d \
              --name artventuria-api \
              -p 8000:7000 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/artventuria-api:${GITHUB_REF_NAME}
          
            echo "Checking container status..."
            docker ps | grep artventuria-api
          EOF
